{"ast":null,"code":"import Control from \"./TodoCalendarControl.vue\";\nexport default {\n  components: {\n    Control\n  },\n\n  data() {\n    return {\n      days: [\"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\"],\n      months: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n      dates: [],\n      currentYear: 0,\n      currentMonth: 0,\n      year: 0,\n      month: 0,\n      currentDate: new Date().getDate(),\n      prevDate: [],\n      previewDate: []\n    };\n  },\n\n  computed: {\n    monthToString: function () {\n      return this.months[this.month - 1];\n    },\n    isCurrentDate: function () {\n      let status = false;\n\n      if (this.currentYear === 0 && this.currentMonth === 0) {\n        status = true;\n      } else {\n        status = this.currentYear === new Date().getFullYear() && this.currentMonth === new Date().getMonth() + 1;\n      }\n\n      return status;\n    }\n  } // created() {\n  //     this.init();\n  // },\n  // methods: {\n  //     init(param) {\n  //         if (param) {\n  //             this.year = param[0];\n  //             this.month = param[1];\n  //             this.calendarDate();\n  //         } else {\n  //             const date = new Date();\n  //             this.year = date.getFullYear();\n  //             this.month = date.getMonth() + 1;\n  //             this.calendarDate();\n  //         }\n  //     },\n  //     calendarDate() {\n  //         const [\n  //             monthFirstDay,\n  //             monthLastDate,\n  //             prevMonthLastDate\n  //         ] = this.getFirstDayLastDate(this.year, this.month);\n  //         this.dates = this.getDaysOfMonth(\n  //             monthFirstDay,\n  //             monthLastDate,\n  //             prevMonthLastDate\n  //         );\n  //     },\n  //     getFirstDayLastDate(year, month) {\n  //         const firstDay = new Date(year, month - 1, 1).getDay();\n  //         const lastDate = new Date(year, month, 0).getDate();\n  //         let lastMonth = month - 1;\n  //         if (month === 1) {\n  //             lastMonth = 12;\n  //             year -= 1;\n  //         }\n  //         const prevLastDate = new Date(year, lastMonth, 0).getDate();\n  //         return [firstDay, lastDate, prevLastDate];\n  //     },\n  //     getDaysOfMonth(monthFirstDay, monthLastDate, prevMonthLastDate) {\n  //         let day = 1;\n  //         let prevDay = prevMonthLastDate - monthFirstDay + 1;\n  //         let dates = [];\n  //         let daysOfWeek = [];\n  //         while (day <= monthLastDate) {\n  //             if (day === 1) {\n  //                 this.getPrevDates(monthFirstDay, daysOfWeek, prevDay);\n  //                 this.padDates(daysOfWeek);\n  //             }\n  //             if (daysOfWeek.length === 7) {\n  //                 dates.push(daysOfWeek);\n  //                 day = daysOfWeek[daysOfWeek.length - 1];\n  //                 daysOfWeek = [];\n  //             } else if (\n  //                 daysOfWeek.length < 7 &&\n  //                 daysOfWeek.indexOf(monthLastDate) > -1\n  //             ) {\n  //                 this.padDates(daysOfWeek);\n  //                 dates.push(daysOfWeek);\n  //                 break;\n  //             }\n  //             day++;\n  //             if (daysOfWeek.length <= 7) {\n  //                 daysOfWeek.push(day);\n  //             }\n  //         }\n  //         return dates;\n  //     },\n  //     getPrevDates(monthFirstDay, daysOfWeek, prevDay) {\n  //         for (let j = 0; j < monthFirstDay; j++) {\n  //         daysOfWeek.push(prevDay);\n  //         this.prevDate.push(prevDay);\n  //         prevDay += 1;\n  //         }\n  //     },\n  //     padDates(daysOfWeek) {\n  //         const len = daysOfWeek.length;\n  //         const leftDays = 7 - len;\n  //         if (len >= 0 && len < 7) {\n  //             for (let i = 1; i <= leftDays; i++) {\n  //                 daysOfWeek.push(i);\n  //                 if (this.previewDate.length < leftDays) this.previewDate.push(i);\n  //             }\n  //         }\n  //     },\n  //     controlMonth(p) {\n  //         if (p === \"prev\") {\n  //         this.currentMonth = this.month - 1;\n  //         this.currentYear = this.year;\n  //         if (this.month === 1) {\n  //             this.currentMonth = 12;\n  //             this.currentYear = this.year -= 1;\n  //         }\n  //         } else {\n  //             this.currentMonth = this.month + 1;\n  //             this.currentYear = this.year;\n  //             if (this.month === 12) {\n  //                 this.currentMonth = 1;\n  //                 this.currentYear = this.year += 1;\n  //             }\n  //         }\n  //         const param = [this.currentYear, this.currentMonth];\n  //         this.init(param);\n  //     },\n  //     controlYear(p) {\n  //         if (p === \"prev\") {\n  //             this.currentYear = this.year - 1;\n  //         } else {\n  //             this.currentYear = this.year + 1;\n  //         }\n  //         const param = [this.currentYear, this.month];\n  //         this.init(param);\n  //     },\n  //     skipBy(p) {\n  //         this.currentYear = new Date().getFullYear();\n  //         if (p === \"today\") {\n  //             this.currentMonth = new Date().getMonth() + 1;\n  //         } else {\n  //             this.currentMonth = p + 1;\n  //         }\n  //         const param = [this.currentYear, this.currentMonth];\n  //         this.init(param);\n  //     },\n  //     getMatchedTodos(day) {\n  //         return this.$store.state.todos.filter(todo => {\n  //             const todoDate = new Date(todo.createdAt);\n  //             const isDateMatched = todoDate.getDate() === day;\n  //             const isMonthMatched = todoDate.getMonth() === this.month - 1;\n  //             const isYearMathced = todoDate.getFullYear() === this.year;\n  //             return isDateMatched && isMonthMatched && isYearMathced;\n  //         });\n  //     },\n  //     isPrevDates(day, idx) {\n  //         return (\n  //             (this.prevDate.indexOf(day) > -1 && idx < 1) ||\n  //             (this.previewDate.indexOf(day) > -1 && idx > 1)\n  //         );\n  //     }\n  // }\n\n};","map":{"version":3,"mappings":"AAkFA,OAAOA,OAAP,MAAoB,2BAApB;AACA,eAAe;EACXC,UAAU,EAAE;IACRD;EADQ,CADD;;EAIXE,IAAI,GAAG;IACH,OAAO;MACHC,IAAI,EAAE,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,KAApC,EAA2C,KAA3C,CADH;MAEHC,MAAM,EAAE,CACR,SADQ,EAER,UAFQ,EAGR,OAHQ,EAIR,OAJQ,EAKR,KALQ,EAMR,MANQ,EAOR,MAPQ,EAQR,QARQ,EASR,WATQ,EAUR,SAVQ,EAWR,UAXQ,EAYR,UAZQ,CAFL;MAgBHC,KAAK,EAAE,EAhBJ;MAiBHC,WAAW,EAAE,CAjBV;MAkBHC,YAAY,EAAE,CAlBX;MAmBHC,IAAI,EAAE,CAnBH;MAoBHC,KAAK,EAAE,CApBJ;MAqBHC,WAAW,EAAE,IAAIC,IAAJ,GAAWC,OAAX,EArBV;MAsBHC,QAAQ,EAAE,EAtBP;MAuBHC,WAAW,EAAE;IAvBV,CAAP;EAyBH,CA9BU;;EA+BXC,QAAQ,EAAE;IACNC,aAAa,EAAE,YAAW;MACtB,OAAO,KAAKZ,MAAL,CAAY,KAAKK,KAAL,GAAa,CAAzB,CAAP;IACH,CAHK;IAINQ,aAAa,EAAE,YAAW;MACtB,IAAIC,MAAK,GAAI,KAAb;;MACA,IAAI,KAAKZ,WAAL,KAAqB,CAArB,IAA0B,KAAKC,YAAL,KAAsB,CAApD,EAAuD;QACvDW,MAAK,GAAI,IAAT;MACA,CAFA,MAEO;QACPA,MAAK,GACD,KAAKZ,WAAL,KAAqB,IAAIK,IAAJ,GAAWQ,WAAX,EAArB,IACA,KAAKZ,YAAL,KAAsB,IAAII,IAAJ,GAAWS,QAAX,KAAwB,CAFlD;MAGA;;MACA,OAAOF,MAAP;IACJ;EAdzLW,CAAf","names":["Control","components","data","days","months","dates","currentYear","currentMonth","year","month","currentDate","Date","getDate","prevDate","previewDate","computed","monthToString","isCurrentDate","status","getFullYear","getMonth"],"sourceRoot":"","sources":["C:\\Users\\w2580\\OneDrive\\문서\\GitHub\\MyToDo\\src\\components\\TodoCalendar\\TodoCalendar.vue"],"sourcesContent":["<template>\r\n    <!-- <main\r\n        class=\"container flex flex-row flex-wrap w-full h-auto justify-around items-center\"\r\n    > -->\r\n    <main>\r\n    <Control @skip-by=\"skipBy\" />\r\n    <!-- <section\r\n        class=\"calendar-wrapper flex flex-col justify-center items-center rounded border border-solid bg-gray-200 h-full cal-wrapper m-1\"\r\n    > -->\r\n    <section>\r\n        <!-- <div\r\n            class=\"flex flex-row justify-around items-center w-full h-12 text-lg bg-primary-lightmoonlight\"\r\n        > -->\r\n        <div>\r\n            <!-- header-arrow cursor-pointe -->\r\n            \r\n            <i class=\"bi bi-caret-left-fill\"\r\n                @click=\"controlMonth('prev')\"\r\n            ></i>\r\n            <i class=\"bi bi-caret-left\"\r\n                @click=\"controlYear('prev')\"\r\n            ></i>\r\n\r\n            <h1 class=\"font-bold\">{{ monthToString }}</h1>\r\n            <span>{{ year }}</span>\r\n            \r\n            <i class=\"bi bi-caret-right\"\r\n                @click=\"controlMonth('next')\"\r\n            ></i>\r\n            <i class=\"bi bi-caret-right-fill\"\r\n                @click=\"controlYear('next')\"\r\n            ></i>\r\n        </div>\r\n            <table> <!--class=\"w-full h-auto\"-->\r\n                <thead> <!--class=\"flex w-full h-12 justify-around items-center\"-->\r\n                    <th v-for=\"day in days\" :key=\"day\">{{ day }}</th>\r\n                </thead> \r\n                <tbody>\r\n                    <tr\r\n                        v-for=\"(date, idx) in dates\"\r\n                        :key=\"idx\"\r\n                    > <!--class=\"flex w-full h-12 justify-around items-center mb-3\"-->\r\n                    <td\r\n                        v-for=\"(day, index) in date\"\r\n                        :key=\"index\"\r\n                        :class=\"{\r\n                        'selected-date': day === currentDate && isCurrentDate,\r\n                        'prev-dates': isPrevDates(day, idx)\r\n                        }\"\r\n                    > <!--class=\"w-12 h-12 flex flex-col justify-center items-center hover-date rounded-full\"-->\r\n                        <div>\r\n                            {{ day }}\r\n                        </div><!--class=\"dateOnly w-full flex items-center justify-center\"-->\r\n                        <div\r\n                            v-if=\"getMatchedTodos(day).length > 0 && !isPrevDates(day, idx)\"\r\n                        ><!--class=\"markOnly w-full flex flex-row items-center justify-center\"-->\r\n                        <!-- <div\r\n                            v-for=\"(todo, idx) in getMatchedTodos(day).slice(0, 3)\"\r\n                            :key=\"idx\"\r\n                            class=\"todo-dot text-primary-blue\"\r\n                        >\r\n                            <font-awesome-icon\r\n                            icon=\"circle-notch\"\r\n                            v-if=\"todo.createdAt && !todo.completedAt\"\r\n                            class=\"text-xs\"\r\n                            />\r\n                            <font-awesome-icon\r\n                            icon=\"circle\"\r\n                            v-if=\"todo.createdAt && todo.completedAt\"\r\n                            class=\"text-xs\"\r\n                            />\r\n                        </div> -->\r\n                        </div>\r\n                    </td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        </section>\r\n    </main>\r\n</template>\r\n\r\n<script>\r\nimport Control from \"./TodoCalendarControl.vue\";\r\nexport default {\r\n    components: {\r\n        Control\r\n    },\r\n    data() {\r\n        return {\r\n            days: [\"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\"],\r\n            months: [\r\n            \"January\",\r\n            \"February\",\r\n            \"March\",\r\n            \"April\",\r\n            \"May\",\r\n            \"June\",\r\n            \"July\",\r\n            \"August\",\r\n            \"September\",\r\n            \"October\",\r\n            \"November\",\r\n            \"December\"\r\n            ],\r\n            dates: [],\r\n            currentYear: 0,\r\n            currentMonth: 0,\r\n            year: 0,\r\n            month: 0,\r\n            currentDate: new Date().getDate(),\r\n            prevDate: [],\r\n            previewDate: []\r\n        };\r\n    },\r\n    computed: {\r\n        monthToString: function() {\r\n            return this.months[this.month - 1];\r\n        },\r\n        isCurrentDate: function() {\r\n            let status = false;\r\n            if (this.currentYear === 0 && this.currentMonth === 0) {\r\n            status = true;\r\n            } else {\r\n            status =\r\n                this.currentYear === new Date().getFullYear() &&\r\n                this.currentMonth === new Date().getMonth() + 1;\r\n            }\r\n            return status;\r\n        }\r\n    },\r\n    // created() {\r\n    //     this.init();\r\n    // },\r\n    // methods: {\r\n    //     init(param) {\r\n    //         if (param) {\r\n    //             this.year = param[0];\r\n    //             this.month = param[1];\r\n    //             this.calendarDate();\r\n    //         } else {\r\n    //             const date = new Date();\r\n    //             this.year = date.getFullYear();\r\n    //             this.month = date.getMonth() + 1;\r\n    //             this.calendarDate();\r\n    //         }\r\n    //     },\r\n    //     calendarDate() {\r\n    //         const [\r\n    //             monthFirstDay,\r\n    //             monthLastDate,\r\n    //             prevMonthLastDate\r\n    //         ] = this.getFirstDayLastDate(this.year, this.month);\r\n    //         this.dates = this.getDaysOfMonth(\r\n    //             monthFirstDay,\r\n    //             monthLastDate,\r\n    //             prevMonthLastDate\r\n    //         );\r\n    //     },\r\n    //     getFirstDayLastDate(year, month) {\r\n    //         const firstDay = new Date(year, month - 1, 1).getDay();\r\n    //         const lastDate = new Date(year, month, 0).getDate();\r\n    //         let lastMonth = month - 1;\r\n    //         if (month === 1) {\r\n    //             lastMonth = 12;\r\n    //             year -= 1;\r\n    //         }\r\n    //         const prevLastDate = new Date(year, lastMonth, 0).getDate();\r\n    //         return [firstDay, lastDate, prevLastDate];\r\n    //     },\r\n    //     getDaysOfMonth(monthFirstDay, monthLastDate, prevMonthLastDate) {\r\n    //         let day = 1;\r\n    //         let prevDay = prevMonthLastDate - monthFirstDay + 1;\r\n    //         let dates = [];\r\n    //         let daysOfWeek = [];\r\n    //         while (day <= monthLastDate) {\r\n    //             if (day === 1) {\r\n    //                 this.getPrevDates(monthFirstDay, daysOfWeek, prevDay);\r\n    //                 this.padDates(daysOfWeek);\r\n    //             }\r\n    //             if (daysOfWeek.length === 7) {\r\n    //                 dates.push(daysOfWeek);\r\n    //                 day = daysOfWeek[daysOfWeek.length - 1];\r\n    //                 daysOfWeek = [];\r\n    //             } else if (\r\n    //                 daysOfWeek.length < 7 &&\r\n    //                 daysOfWeek.indexOf(monthLastDate) > -1\r\n    //             ) {\r\n    //                 this.padDates(daysOfWeek);\r\n    //                 dates.push(daysOfWeek);\r\n    //                 break;\r\n    //             }\r\n    //             day++;\r\n    //             if (daysOfWeek.length <= 7) {\r\n    //                 daysOfWeek.push(day);\r\n    //             }\r\n    //         }\r\n    //         return dates;\r\n    //     },\r\n    //     getPrevDates(monthFirstDay, daysOfWeek, prevDay) {\r\n    //         for (let j = 0; j < monthFirstDay; j++) {\r\n    //         daysOfWeek.push(prevDay);\r\n    //         this.prevDate.push(prevDay);\r\n    //         prevDay += 1;\r\n    //         }\r\n    //     },\r\n    //     padDates(daysOfWeek) {\r\n    //         const len = daysOfWeek.length;\r\n    //         const leftDays = 7 - len;\r\n    //         if (len >= 0 && len < 7) {\r\n    //             for (let i = 1; i <= leftDays; i++) {\r\n    //                 daysOfWeek.push(i);\r\n    //                 if (this.previewDate.length < leftDays) this.previewDate.push(i);\r\n    //             }\r\n    //         }\r\n    //     },\r\n    //     controlMonth(p) {\r\n    //         if (p === \"prev\") {\r\n    //         this.currentMonth = this.month - 1;\r\n    //         this.currentYear = this.year;\r\n    //         if (this.month === 1) {\r\n    //             this.currentMonth = 12;\r\n    //             this.currentYear = this.year -= 1;\r\n    //         }\r\n    //         } else {\r\n    //             this.currentMonth = this.month + 1;\r\n    //             this.currentYear = this.year;\r\n    //             if (this.month === 12) {\r\n    //                 this.currentMonth = 1;\r\n    //                 this.currentYear = this.year += 1;\r\n    //             }\r\n    //         }\r\n    //         const param = [this.currentYear, this.currentMonth];\r\n    //         this.init(param);\r\n    //     },\r\n    //     controlYear(p) {\r\n    //         if (p === \"prev\") {\r\n    //             this.currentYear = this.year - 1;\r\n    //         } else {\r\n    //             this.currentYear = this.year + 1;\r\n    //         }\r\n    //         const param = [this.currentYear, this.month];\r\n    //         this.init(param);\r\n    //     },\r\n    //     skipBy(p) {\r\n    //         this.currentYear = new Date().getFullYear();\r\n    //         if (p === \"today\") {\r\n    //             this.currentMonth = new Date().getMonth() + 1;\r\n    //         } else {\r\n    //             this.currentMonth = p + 1;\r\n    //         }\r\n    //         const param = [this.currentYear, this.currentMonth];\r\n    //         this.init(param);\r\n    //     },\r\n    //     getMatchedTodos(day) {\r\n    //         return this.$store.state.todos.filter(todo => {\r\n    //             const todoDate = new Date(todo.createdAt);\r\n    //             const isDateMatched = todoDate.getDate() === day;\r\n    //             const isMonthMatched = todoDate.getMonth() === this.month - 1;\r\n    //             const isYearMathced = todoDate.getFullYear() === this.year;\r\n    //             return isDateMatched && isMonthMatched && isYearMathced;\r\n    //         });\r\n    //     },\r\n    //     isPrevDates(day, idx) {\r\n    //         return (\r\n    //             (this.prevDate.indexOf(day) > -1 && idx < 1) ||\r\n    //             (this.previewDate.indexOf(day) > -1 && idx > 1)\r\n    //         );\r\n    //     }\r\n    // }\r\n};\r\n</script>"]},"metadata":{},"sourceType":"module"}