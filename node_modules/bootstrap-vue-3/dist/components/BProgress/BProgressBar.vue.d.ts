import type { Booleanish, ColorVariant } from '../../types';
import { PropType } from 'vue';
declare const _sfc_main: import("vue").DefineComponent<{
    animated: {
        type: PropType<Booleanish>;
        default: boolean;
    };
    label: {
        type: StringConstructor;
    };
    labelHtml: {
        type: StringConstructor;
    };
    max: {
        type: (StringConstructor | NumberConstructor)[];
    };
    precision: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    showProgress: {
        type: PropType<Booleanish>;
        default: boolean;
    };
    showValue: {
        type: PropType<Booleanish>;
        default: boolean;
    };
    striped: {
        type: PropType<Booleanish>;
        default: boolean;
    };
    value: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    variant: {
        type: PropType<ColorVariant>;
    };
}, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    animated: {
        type: PropType<Booleanish>;
        default: boolean;
    };
    label: {
        type: StringConstructor;
    };
    labelHtml: {
        type: StringConstructor;
    };
    max: {
        type: (StringConstructor | NumberConstructor)[];
    };
    precision: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    showProgress: {
        type: PropType<Booleanish>;
        default: boolean;
    };
    showValue: {
        type: PropType<Booleanish>;
        default: boolean;
    };
    striped: {
        type: PropType<Booleanish>;
        default: boolean;
    };
    value: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    variant: {
        type: PropType<ColorVariant>;
    };
}>>, {
    value: string | number;
    animated: Booleanish;
    precision: string | number;
    showProgress: Booleanish;
    showValue: Booleanish;
    striped: Booleanish;
}>;
export default _sfc_main;
